# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/197qwsvkn9t_9dB48p58BS6r-kA4L9BoC
"""
#The code here concerns to the implementation of naive bayes using iris dataset (for calculating accuracy of sepal length and sepal width)

!pip install sklearn 
!pip install scikit-learn

from sklearn import datasets
from sklearn.naive_bayes import GaussianNB #GuassianNB is used assuming that the features are following normal distribution, and possess continuous features.
from sklearn.model_selection import train_test_split
from sklearn import metrics
import seaborn as sns 
from matplotlib import pyplot as plt 
from matplotlib import colors
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt

irs = datasets.load_iris()  #Load the dataset 
print ("Features: ", irs.feature_names) #print the names of 4 features
print ("Labels: ", irs.target_names)  #print the label type of iris(class_0,class_1,class_2)
print (irs.data[0:5])
print (irs.target)

X = irs.data[:, :2] #slicing for sepal_length and sepal_width

X_train, X_test, y_train, y_test = train_test_split(X, irs.target, test_size=0.3,random_state=109) # 70% training and 30% test

#Create a Gaussian Classifier
gnb = GaussianNB()

#Train the model using the training sets
gnb.fit(X_train, y_train)

#Predict the response for test dataset
y_pred = gnb.predict(X_test) 
predicted = gnb.predict([[4,1]]) #predicting for custom values
print ("Predicted =", predicted )

# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
  
iris = sns.load_dataset('iris') 
  
# style used as a theme of graph  
# for example if we want black  
# graph with grid then write "blackgrid" 
sns.set_style("whitegrid") 
  
# sepal_length, petal_length are iris 
# feature data height used to define 
# Height of graph whereas hue store the 
# class of iris dataset. 
#sns.relplot(x="total_bill", y="tip", hue="smoker", style="time", data=X)
'''sns.FacetGrid(iris, hue ="species",
              height = 6).map(plt.scatter,  
                              'sepal_length',  
                              'sepal_width').add_legend()''' 


# sns.relplot("result[: , 0]", "result[: , 1]",hue= "result[: , 2]",height=6, data= result)

#sns.relplot(X_test[:, 0], X_test[:, 1], hue = y_pred, height=6)

fig, ax = plt.subplots()
sns.relplot("sepal_length", "sepal_width",hue= "species",height=6, data=iris, ax = ax, palette = ["r","g","b"])
#sns.color_palette(palette=dark, n_colors= red, desat= None, as_cmap=False)
ax2 = ax.twinx()
sns.relplot(X_test[:, 0], X_test[:, 1], hue = y_pred, height=6, ax = ax2, palette = ["r","g","b"])
plt.show()
print (X_test[:, 0]) #sepal_length, sepal_width
print (y_pred) #predicted columns [0,1,2]

cm = confusion_matrix(y_test, y_pred)
print(cm)
sns.heatmap(cm, square=True, annot=True, cmap='RdBu', cbar=False,
xticklabels=['Setosa', 'versicolour', 'virginica'], yticklabels=['Setosa', 'versicolour', 'virginica'])
plt.xlabel('true label')
plt.ylabel('predicted label')
